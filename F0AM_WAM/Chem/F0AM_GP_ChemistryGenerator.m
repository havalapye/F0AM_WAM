function [particle,Cstar] = F0AM_GP_ChemistryGenerator(Cstar_threshold,P,T,Cnames);
% generate a GPpartitioning mfile for use in the MCM GPpartitioning file
% inputs:
% Cstar_threshold: for flagging a maximum C*, i.e. include all species in 
% gas/particle partitioning calculations with C* equal or below the input
% P,T: in torr and K respectively. for calculating number density

cd('C:\MATLAB_Emma\Models\F0AM\F0AMv3.1_GP\Tools\SMILES\')
VapPressure = xlsread('SMILES_vapPress_Compernolle.xlsx'); %log10 in atmospheres
VapPressure(1) = []; %this is the temperature (K) where the vapor pressures are valid

load ('MCMv331SpeciesInfo.mat')
MCMind = []; 
for ii = 1:length(Cnames)
    x = find(strcmp(MCMnames, Cnames(ii)));
    MCMind = [MCMind; x]; %MCMnames index of the Cnames that match the subset
    if isempty(find(strcmp(MCMnames, Cnames(ii))));
        y(ii)=0;
    else
        y(ii)=ii; %index for flagging where real data should go
    end
end
y(find(y==0))=[];

%pre-allocate sizes of mw and C*
tempMW = NaN(length(Cnames),1); 
tempVapPressure = NaN(length(Cnames),1); 
%fill in the pre-allocated matrices with data of compounds of interest
molecweight(y) = MolWeight(MCMind);
tempVapPressure(y) = VapPressure(MCMind); 
 

%load in all your species info: MolWeights, molecform, SMILES, vapor press.
load MCMv331SpeciesInfo.mat
%convert input Vapor pressures to C*
Cstar = zeros(1,length(molecweight));
for ii = 1:length(molecweight)
    Cstar(ii) = mr_to_ugm3(10^(tempVapPressure(ii)),molecweight(ii)); %10^(tempVapPressure(ii)).*M_calc(P,T)./6.022E23.*molecweight(ii).*1E6; %ug/m3
end
t = find(strcmp(Cnames,'DHDHP')); Cstar(t)=.7; %c5h12o6 original=0.0355. this is FIGAERO suggested value
l = find(strcmp(Cnames, 'THHP')); Cstar(l)=.7; %c5h12o5 original=0.5062
n = find(strcmp(Cnames, 'DHHEPOX')); Cstar(l)=60; %c5h10o5 original=16. this is SIMPOL calculated value
o = find(strcmp(Cnames, 'DHDHPket')); Cstar(l)=.3; %c5h10o7 original=.05. this is SIMPOL calculated value
m = find(strcmp(Cnames, 'C537OOH')); Cstar(l)=9; %c5h10o7,MCM original=1. this is SIMPOL calculated value
% n = find(strcmp(Cnames, 'C5H10O6')); Cstar(n)=Cstar(n).*10; %c5h1oo6 original=4.0018
% o = find(strcmp(Cnames, 'C57OOH')); Cstar(o)=Cstar(o)./5; %c5h1oo5 original=55.1796
% m = find(strcmp(Cnames, 'C58OOH')); Cstar(m)=Cstar(m)./5; %c5h1oo5 original=55.1796

Cstar = Cstar./1.5; %added 1/4/17

%make particle cmpd for each existing cmpd
ind = find(Cstar<=Cstar_threshold(1)); %get indexes of compounds with desired C*
% toosmall = find(Cstar(ind)<10);
% Cstar(ind(toosmall)) = Cstar(ind(toosmall)).*10;  %try increasing all C* by a factor of 10
Pnames = strcat(Cnames(ind), 'p'); %make particle phase for each species
%might also need to pare down other other MCMSpeciesInfo pieces
particle.names = Pnames;
% particle.Cstar = NaN(length(Cnames),1); %pre-allocate so species with C*>threshold will be nan's
particle.Cstar = Cstar(ind)'; %pull out desired C* values 
particle.mass = molecweight(ind)';

%generate GPrnames
GPrnames_condens =  cell(length(Pnames),1); GPrnames_evap =  cell(length(Pnames),1);
for kk = 1:length(Pnames);
    GPrnames_condens(kk,:) = cellstr(sprintf('%s %s %s', Cnames{ind(kk)}, '+ OA =', Pnames{kk})); %generate condensation rxns
    GPrnames_evap(kk,:) = cellstr(sprintf('%s %s %s', Pnames{kk}, '+ Evaporation =', Cnames{ind(kk)}));%strcat(Pnames(kk), ' + Evaporation = ', Cnames(ind(kk))); %generate evaporation rxns
end
GPrnames = [GPrnames_condens; GPrnames_evap]; %put together reaction names
%flag condensation and evaporation rxns
icondens = 1:1:length(GPrnames_condens); ievap = length(GPrnames_condens)+1:1:length(GPrnames);


%find RO2names
RO2names = [];
for jj = 1:length(Pnames)
    test(jj) = regexp(Pnames(jj),'O2p');
    if isempty(test{jj})==0;
        RO2names = [RO2names; Pnames(jj)];
    end
end

%find OAnames
OAnames = [];
for jj = 1:length(Pnames)
    test(jj) = regexp(Pnames(jj),'p');
    if isempty(test{1})==0;
        OAnames = [OAnames; Pnames(jj)];
    end
end

%generate k values
k = zeros(length(GPrnames),1);
k(icondens) = 1; %condensation k's are 1 for now, they get overwritten in UWCM_ModelCore_GP
for zz = 1:length(ievap);
    k(ievap(zz)) = ugm3_to_mr(Cstar(ind(zz)),molecweight(ind(zz))).*M_calc(P,T); %Convert C* from ugm3-->molec/cm3
end
k = cellstr(num2str(k));

%% write the GP chemistry m-file
save_flnm = 'C:\MATLAB_Emma\Models\F0AM\F0AMv3.1_GP\Chem\MCMv331\GPpartitioning.m';
fid = fopen(save_flnm,'w');

fprintf(fid,'%s\n',['% ' save_flnm]);
fprintf(fid,'%s\n','% generated by JAT & ELD');
fprintf(fid,'%s\n',['% ' datestr(now,'YYYYmmdd')]);
fprintf(fid,'%s\n',['% C* threshold = ' num2str(Cstar_threshold(1))]);
fprintf(fid,'%s\n',['% # of species = ' num2str(length(Pnames))]);
fprintf(fid,'%s\n\n',['% # of reactions = ' num2str(length(GPrnames))]);

%Print species names
fprintf(fid,'%s\n','SpeciesToAdd = {...');
for i=1:length(Pnames)
    s = Pnames{i};
    fprintf(fid,'%s',['''' s '''; ']);
    if rem(i,10)==0
        fprintf(fid,'%s\n','...');
    end
end
fprintf(fid,'%s %s\n',['''' 'ttlOA' '''; ','''' 'OA' '''; ']); %manually add in the OA components
fprintf(fid,'%s\n','...');
fprintf(fid,'%s\n\n','};');

%Print RO2 names
fprintf(fid,'%s\n','RO2ToAdd = {...');
for i=1:length(RO2names)
    s = RO2names{i};
    fprintf(fid,'%s',['''' s '''; ']);
    if rem(i,10)==0
        fprintf(fid,'%s\n','...');
    end
end
fprintf(fid,'%s\n\n','};');

%Print OA names
fprintf(fid,'%s\n','OAsToAdd = {...');
for i=1:length(OAnames)
    s = OAnames{i};
    fprintf(fid,'%s',['''' s '''; ']);
    if rem(i,10)==0
        fprintf(fid,'%s\n','...');
    end
end
fprintf(fid,'%s\n\n','};');

%Print wall-loss-able vapor names, i.e. gas cmpds that turn into particles
fprintf(fid,'%s\n','VaporsToAdd = {...');
for i=1:length(OAnames)
    s = strrep((OAnames{i}), 'p', '');
    fprintf(fid,'%s',['''' s '''; ']);
    if rem(i,10)==0
        fprintf(fid,'%s\n','...');
    end
end
fprintf(fid,'%s\n\n','};');

%Print some code
fprintf(fid,'%s\n\n','AddSpecies');

%create reaction blocks
for i=1:length(GPrnames);
    name = GPrnames{i};
    ki = k{i};
    arrow = regexp(name,'=','start'); %reactant/product divider
    rct = regexp(name(1:arrow-1),'\<*\w*\>','match'); %cell array of reactant names
    %you want "OA" to be used instead of "Evaporation" to be used as reactants, so clear
    %those out
    if  strcmp(rct(2),'OA')==1
        rct(2) = [];
    elseif  strcmp(rct(2),'Evaporation')==1
        rct(2) = strrep(rct(2), 'Evaporation', 'OA'); %OA is a reactant when you're evaporating...
    end
    prd = regexp(name(arrow+1:end),'\<*\w*\>','match'); %cell array of product names

    Gstr = []; fstr=[];
    if  isempty(find(ismember(rct, 'OA')))==0; %strcmp(rct(2),'OA')==1 %but you don't want OA in the f or g strings
        touse = rct; touse(find(ismember(rct, 'OA'))) = []; %get rid of OA to write f and g strings
            for j=1:length(touse) %build reactant multiplier string and reactant f-string
%                 Gstr = [Gstr 'Gstr{i,' num2str(j) '} = ''' touse{j} '''; '];
                fstr = [fstr 'f' touse{j} '(i)=f' touse{j} '(i)-1; '];
            end
            for o=1:length(rct);
                Gstr = [Gstr 'Gstr{i,' num2str(o) '} = ''' rct{o} '''; '];
            end
    else
        for j=1:length(rct) %build reactant multiplier string and reactant f-string
            Gstr = [Gstr 'Gstr{i,' num2str(j) '} = ''' rct{j} '''; '];
            fstr = [fstr 'f' rct{j} '(i)=f' rct{j} '(i)-1; '];
        end
    end

    if ~isempty(strfind(ki, '.*RO2')) %deal with RO2 in rate constant
        ki = strrep(ki,'.*RO2','');
        Gstr = [Gstr 'Gstr{i,2} = ''RO2'';'];
    end

    for j=1:length(prd) %build product f-string
        p = prd{j};
        fstr=[fstr 'f' p '(i)=f' p '(i)+1; '];
    end
    
           fprintf(fid,'%s\n','i=i+1;');
           fprintf(fid,'%s\n',['Rnames{i} = ''' name ''';']);
           fprintf(fid,'%s\n',['k(:,i) = ' ki ';']);
           fprintf(fid,'%s\n',Gstr);
           fprintf(fid,'%s\n\n',fstr);
end

fclose(fid);

